# -*- coding: utf-8 -*-
"""Weapon Detection.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1HtdZW4v9v7CCKK28JrAouZ2l3oLL-CQR
"""

import cv2
import numpy as np
import os
from sklearn.cluster import KMeans
from sklearn.svm import SVC
from sklearn.model_selection import train_test_split

images_path = "/content/drive/MyDrive/images/Images"
labels_path = "/content/drive/MyDrive/images/Labels"

image_size = (224, 224)

def read_label_file(label_file):
    with open(label_file, "r") as f:
        num_objects = int(f.readline().strip())
        boxes = []
        for i in range(num_objects):
            box_coords = f.readline().strip().split()
            box = [int(coord) for coord in box_coords]
            boxes.append(box)
    return boxes

images = []
labels = []


for image_file in os.listdir(images_path):

    image = cv2.imread(os.path.join(images_path, image_file))
    image = cv2.resize(image, image_size)


    gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
    edges = cv2.Canny(gray, 100, 200)
    ret, thresh = cv2.threshold(edges, thresh=128, maxval=255, type=cv2.THRESH_BINARY_INV)
    image_array = np.array(thresh)
    images.append(image_array.flatten())
    label_file = os.path.join(labels_path, os.path.splitext(image_file)[0] + ".txt")
    boxes = read_label_file(label_file)

    label = [0, 0, 0, 0]
    if len(boxes) > 0:
        label = boxes[0]
    labels.append(label)

X = np.array(images)
y = np.array(labels)


kmeans = KMeans(n_clusters=2)
kmeans.fit(X)


cluster_labels = kmeans.predict(X)

X_train, X_test, y_train, y_test = train_test_split(X, cluster_labels, test_size=0.2, random_state=42)

svm = SVC(kernel='linear')
svm.fit(X_train, y_train)
t
accuracy2 = svm.score(X_test, y_test)
print("Accuracy:", accuracy2)

kmeans = KMeans(n_clusters=2, random_state=0).fit(X)

print(kmeans.labels_)

import matplotlib.pyplot as plt

cluster_1_indices = np.where(cluster_labels == 0)[0]
cluster_2_indices = np.where(cluster_labels == 1)[0]

fig, ax = plt.subplots(1, 2)
random_index = np.random.choice(cluster_1_indices)
ax[0].imshow(X[random_index].reshape(image_size))
ax[0].set_title("Cluster 1")
random_index = np.random.choice(cluster_2_indices)
ax[1].imshow(X[random_index].reshape(image_size))
ax[1].set_title("Cluster 2")
plt.show()

from sklearn.metrics import precision_score, recall_score, f1_score

y_pred = svm.predict(X_test)

precision = precision_score(y_test, y_pred)
recall = recall_score(y_test, y_pred)
f1 = f1_score(y_test, y_pred)

print("Precision:", precision)
print("Recall:", recall)
print("F1 score:", f1)

from sklearn.neighbors import KNeighborsClassifier
neighb = KNeighborsClassifier(n_neighbors=2)
neighb.fit(X_train,y_train)

y_knn = neighb.predict(X_test)
from sklearn.metrics import accuracy_score
print("Accuracy ",accuracy_score(y_test,y_knn))

from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import accuracy_score


dtc = DecisionTreeClassifier()
dtc.fit(X_train, y_train)

y_pred = dtc.predict(X_test)
accuracy3 = accuracy_score(y_test, y_pred)
print("Accuracy:", accuracy3)